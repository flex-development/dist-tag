# Deployment
#
# Publish package and GitHub release when a `release/*` branch is merged into
# `main` or on workflow dispatch.
#
# References:
#
# - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
# - https://github.com/actions/github-script
# - https://github.com/actions/checkout
# - https://github.com/actions/setup-node
# - https://github.com/rickstaa/action-create-tag
# - https://cli.github.com/manual/gh_release_create
# - https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows

---
name: deployment
on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      version:
        description: release version
        required: true
jobs:
  metadata:
    name: Metadata
    if: |
      github.event_name == 'workflow_dispatch' ||
      (startsWith(github.event.pull_request.head.ref, 'release/')
      && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.artifact.outputs.result }}
      dist-tag: ${{ steps.dist-tag.outputs.result }}
      message: ${{ steps.version.outputs.message }}
      prerelease: ${{ steps.prerelease.outputs.result }}
      scope: ${{ steps.workspace.outputs.scope }}
      tag: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - id: workspace
        name: Get workspace
        uses: actions/github-script@v6.1.0
        with:
          script: |
            const scope = `@${context.repo.owner}`

            core.setOutput('scope', scope)
            core.setOutput('workspace', `${scope}/${context.repo.repo}`)
      - id: version
        name: Get version
        uses: actions/github-script@v6.1.0
        env:
          WORKSPACE: ${{ steps.workspace.outputs.workspace }}
        with:
          script: |
            const { payload, repo } = context

            const workspace = process.env.WORKSPACE

            let version

            if (payload.pull_request) {
              version = payload.pull_request.head.ref.split('release/')[1]
            }

            if (payload.inputs) version = payload.inputs.version

            core.setOutput('message', `release: ${workspace}@${version}`)
            core.setOutput('tag', `${repo.repo}@${version}`)
            core.setOutput('version', version)
      - id: artifact
        name: Get artifact path
        uses: actions/github-script@v6.1.0
        env:
          WORKSPACE: ${{ steps.workspace.outputs.workspace }}
          VERSION: ${{ steps.version.outputs.version }}
        with:
          result-encoding: string
          script: |
            const workspace = process.env.WORKSPACE
            const version = process.env.VERSION

            return `./${workspace.replace('/', '-')}-${version}.tgz`
      - id: dist-tag
        name: Get dist tag
        uses: actions/github-script@v6.1.0
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          result-encoding: string
          script: |
            const version = process.env.VERSION
            const tag = version.match(/(?!-)([a-z]+)/)?.[0].trim() ?? ''

            return tag ? `--tag ${tag}` : ''
      - id: prerelease
        name: Check for prerelease
        uses: actions/github-script@v6.1.0
        env:
          DIST_TAG: ${{ steps.dist-tag.outputs.result }}
        with:
          # todo: calculate number of prereleases to include in release notes
          script: return !!process.env.DIST_TAG
  publish-release:
    name: Publish GitHub release
    needs: metadata
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.PAT_GPR_ADMIN }}
      NOTES_FILE: ./RELEASE_NOTES.md
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ADMIN }}
    strategy:
      matrix:
        node: [16.16.0]
    steps:
      - id: checkout
        name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main
      - id: node
        name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          scope: ${{ needs.metadata.outputs.scope }}
      - id: yarn
        name: Install dependencies
        run: yarn --immutable
        env:
          HUSKY: 0
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: pack
        name: Pack project
        run: yarn pack -o %s-%v.tgz && ls
        env:
          NODE_ENV: production
          NODE_NO_WARNINGS: 1
          NODE_OPTIONS: --es-module-specifier-resolution=node
      - id: release-notes
        name: Generate release notes
        # todo: handle prereleases
        run: yarn conventional-changelog -o $NOTES_FILE
        env:
          TS_NODE_PROJECT: ./tsconfig.tsnode.json
      - id: tag
        name: Create and push new tag
        uses: rickstaa/action-create-tag@v1.3.7
        with:
          force_push_tag: true
          message: ${{ needs.metadata.outputs.message }}
          tag: ${{ needs.metadata.outputs.tag }}
      - id: publish
        name: Create and publish release
        run: gh release create $TAG $ASSET -t=$TAG -F=$NOTES_FILE -p=$PRERELEASE
        env:
          ASSET: ${{ needs.metadata.outputs.artifact-path }}
          GITHUB_TOKEN: ${{ env.GH_PAT }}
          PRERELEASE: ${{ needs.metadata.outputs.prerelease }}
          TAG: ${{ needs.metadata.outputs.tag }}
  publish-package:
    name: Publish package to GPR & NPM
    needs: [metadata, publish-release]
    runs-on: ubuntu-latest
    env:
      ARTIFACT: ${{ needs.metadata.outputs.artifact-path }}
      DIST_TAG: ${{ needs.metadata.outputs.dist-tag }}
      GH_PAT: ${{ secrets.PAT_GPR_ADMIN }}
      HUSKY: 0
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ADMIN }}
    strategy:
      matrix:
        node: [16.16.0]
    steps:
      - id: checkout
        name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: main
      - id: setup-npmrc-gpr
        name: Setup .npmrc file [GPR]
        uses: actions/setup-node@v3
        with:
          always-auth: true
          cache: yarn
          node-version: ${{ matrix.node }}
          registry-url: https://npm.pkg.github.com
          scope: ${{ needs.metadata.outputs.scope }}
      - id: yarn
        name: Install dependencies
        run: yarn --immutable
        env:
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: pack
        name: Pack project
        run: yarn pack -o %s-%v.tgz
        env:
          NODE_ENV: production
          NODE_NO_WARNINGS: 1
          NODE_OPTIONS: --es-module-specifier-resolution=node
      - id: publish-to-gpr
        name: Publish package [GPR]
        run: npm publish $ARTIFACT $DIST_TAG
        env:
          NODE_AUTH_TOKEN: ${{ env.GH_PAT }}
      - id: setup-npmrc-npm
        name: Setup .npmrc file [NPM]
        uses: actions/setup-node@v3
        with:
          always-auth: true
          cache: yarn
          node-version: ${{ matrix.node }}
          registry-url: https://registry.npmjs.org
          scope: ${{ needs.metadata.outputs.scope }}
      - id: publish-to-npm
        name: Publish package [NPM]
        run: npm publish $ARTIFACT $DIST_TAG
        env:
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
  cleanup:
    name: Cleanup
    needs: [metadata, publish-release, publish-package]
    runs-on: ubuntu-latest
    steps:
      - id: linked-issues
        name: Get linked issues
        if: github.event_name != 'workflow_dispatch'
        uses: go-actions/linked-issues@v0.1.0
        with:
          pr_url: ${{ github.event.pull_request.html_url }}
      - id: label-linked-issues
        name: Add status:released label to linked issues
        if: github.event_name != 'workflow_dispatch'
        uses: actions/github-script@v6.1.0
        env:
          ISSUES: ${{ steps.linked-issues.outputs.issues }}
        with:
          script: |
            for (const issue_number of JSON.parse(process.env.ISSUES)) {
              await github.issues.addLabels({
                ...context.repo,
                issue_number,
                labels: ['status:released']
              })
            }
      - id: close-released-issues
        name: Close issues with status:released label
        uses: bdougie/close-issues-based-on-label@v1.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          LABEL: status:released
      - id: delete-release-branch
        name: Delete branch release/${{ needs.metadata.outputs.version }}
        uses: dawidd6/action-delete-branch@v3.1.0
        with:
          branches: release/
          github_token: ${{ github.token }}
          suffix: ${{ needs.metadata.outputs.version }}
